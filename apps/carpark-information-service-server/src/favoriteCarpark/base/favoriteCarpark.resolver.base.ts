/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FavoriteCarpark } from "./FavoriteCarpark";
import { FavoriteCarparkCountArgs } from "./FavoriteCarparkCountArgs";
import { FavoriteCarparkFindManyArgs } from "./FavoriteCarparkFindManyArgs";
import { FavoriteCarparkFindUniqueArgs } from "./FavoriteCarparkFindUniqueArgs";
import { CreateFavoriteCarparkArgs } from "./CreateFavoriteCarparkArgs";
import { UpdateFavoriteCarparkArgs } from "./UpdateFavoriteCarparkArgs";
import { DeleteFavoriteCarparkArgs } from "./DeleteFavoriteCarparkArgs";
import { User } from "../../user/base/User";
import { Carpark } from "../../carpark/base/Carpark";
import { FavoriteCarparkService } from "../favoriteCarpark.service";
@graphql.Resolver(() => FavoriteCarpark)
export class FavoriteCarparkResolverBase {
  constructor(protected readonly service: FavoriteCarparkService) {}

  async _favoriteCarparksMeta(
    @graphql.Args() args: FavoriteCarparkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FavoriteCarpark])
  async favoriteCarparks(
    @graphql.Args() args: FavoriteCarparkFindManyArgs
  ): Promise<FavoriteCarpark[]> {
    return this.service.favoriteCarparks(args);
  }

  @graphql.Query(() => FavoriteCarpark, { nullable: true })
  async favoriteCarpark(
    @graphql.Args() args: FavoriteCarparkFindUniqueArgs
  ): Promise<FavoriteCarpark | null> {
    const result = await this.service.favoriteCarpark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FavoriteCarpark)
  async createFavoriteCarpark(
    @graphql.Args() args: CreateFavoriteCarparkArgs
  ): Promise<FavoriteCarpark> {
    return await this.service.createFavoriteCarpark({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        carpark: args.data.carpark
          ? {
              connect: args.data.carpark,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FavoriteCarpark)
  async updateFavoriteCarpark(
    @graphql.Args() args: UpdateFavoriteCarparkArgs
  ): Promise<FavoriteCarpark | null> {
    try {
      return await this.service.updateFavoriteCarpark({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          carpark: args.data.carpark
            ? {
                connect: args.data.carpark,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FavoriteCarpark)
  async deleteFavoriteCarpark(
    @graphql.Args() args: DeleteFavoriteCarparkArgs
  ): Promise<FavoriteCarpark | null> {
    try {
      return await this.service.deleteFavoriteCarpark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: FavoriteCarpark
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Carpark, {
    nullable: true,
    name: "carpark",
  })
  async getCarpark(
    @graphql.Parent() parent: FavoriteCarpark
  ): Promise<Carpark | null> {
    const result = await this.service.getCarpark(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
