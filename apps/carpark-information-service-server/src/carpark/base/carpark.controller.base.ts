/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarparkService } from "../carpark.service";
import { CarparkCreateInput } from "./CarparkCreateInput";
import { Carpark } from "./Carpark";
import { CarparkFindManyArgs } from "./CarparkFindManyArgs";
import { CarparkWhereUniqueInput } from "./CarparkWhereUniqueInput";
import { CarparkUpdateInput } from "./CarparkUpdateInput";
import { FavoriteCarparkFindManyArgs } from "../../favoriteCarpark/base/FavoriteCarparkFindManyArgs";
import { FavoriteCarpark } from "../../favoriteCarpark/base/FavoriteCarpark";
import { FavoriteCarparkWhereUniqueInput } from "../../favoriteCarpark/base/FavoriteCarparkWhereUniqueInput";

export class CarparkControllerBase {
  constructor(protected readonly service: CarparkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Carpark })
  async createCarpark(
    @common.Body() data: CarparkCreateInput
  ): Promise<Carpark> {
    return await this.service.createCarpark({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carParkNo: true,
        address: true,
        xCoord: true,
        yCoord: true,
        carParkType: true,
        typeOfParkingSystem: true,
        shortTermParking: true,
        nightParking: true,
        carParkDecks: true,
        gantryHeight: true,
        hasBasement: true,
        freeParking: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Carpark] })
  @ApiNestedQuery(CarparkFindManyArgs)
  async carparks(@common.Req() request: Request): Promise<Carpark[]> {
    const args = plainToClass(CarparkFindManyArgs, request.query);
    return this.service.carparks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carParkNo: true,
        address: true,
        xCoord: true,
        yCoord: true,
        carParkType: true,
        typeOfParkingSystem: true,
        shortTermParking: true,
        nightParking: true,
        carParkDecks: true,
        gantryHeight: true,
        hasBasement: true,
        freeParking: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Carpark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async carpark(
    @common.Param() params: CarparkWhereUniqueInput
  ): Promise<Carpark | null> {
    const result = await this.service.carpark({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carParkNo: true,
        address: true,
        xCoord: true,
        yCoord: true,
        carParkType: true,
        typeOfParkingSystem: true,
        shortTermParking: true,
        nightParking: true,
        carParkDecks: true,
        gantryHeight: true,
        hasBasement: true,
        freeParking: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Carpark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCarpark(
    @common.Param() params: CarparkWhereUniqueInput,
    @common.Body() data: CarparkUpdateInput
  ): Promise<Carpark | null> {
    try {
      return await this.service.updateCarpark({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          carParkNo: true,
          address: true,
          xCoord: true,
          yCoord: true,
          carParkType: true,
          typeOfParkingSystem: true,
          shortTermParking: true,
          nightParking: true,
          carParkDecks: true,
          gantryHeight: true,
          hasBasement: true,
          freeParking: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Carpark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCarpark(
    @common.Param() params: CarparkWhereUniqueInput
  ): Promise<Carpark | null> {
    try {
      return await this.service.deleteCarpark({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          carParkNo: true,
          address: true,
          xCoord: true,
          yCoord: true,
          carParkType: true,
          typeOfParkingSystem: true,
          shortTermParking: true,
          nightParking: true,
          carParkDecks: true,
          gantryHeight: true,
          hasBasement: true,
          freeParking: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/favoriteCarparks")
  @ApiNestedQuery(FavoriteCarparkFindManyArgs)
  async findFavoriteCarparks(
    @common.Req() request: Request,
    @common.Param() params: CarparkWhereUniqueInput
  ): Promise<FavoriteCarpark[]> {
    const query = plainToClass(FavoriteCarparkFindManyArgs, request.query);
    const results = await this.service.findFavoriteCarparks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        carpark: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favoriteCarparks")
  async connectFavoriteCarparks(
    @common.Param() params: CarparkWhereUniqueInput,
    @common.Body() body: FavoriteCarparkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCarparks: {
        connect: body,
      },
    };
    await this.service.updateCarpark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favoriteCarparks")
  async updateFavoriteCarparks(
    @common.Param() params: CarparkWhereUniqueInput,
    @common.Body() body: FavoriteCarparkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCarparks: {
        set: body,
      },
    };
    await this.service.updateCarpark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favoriteCarparks")
  async disconnectFavoriteCarparks(
    @common.Param() params: CarparkWhereUniqueInput,
    @common.Body() body: FavoriteCarparkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCarparks: {
        disconnect: body,
      },
    };
    await this.service.updateCarpark({
      where: params,
      data,
      select: { id: true },
    });
  }
}
