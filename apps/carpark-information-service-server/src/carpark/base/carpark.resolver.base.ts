/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Carpark } from "./Carpark";
import { CarparkCountArgs } from "./CarparkCountArgs";
import { CarparkFindManyArgs } from "./CarparkFindManyArgs";
import { CarparkFindUniqueArgs } from "./CarparkFindUniqueArgs";
import { CreateCarparkArgs } from "./CreateCarparkArgs";
import { UpdateCarparkArgs } from "./UpdateCarparkArgs";
import { DeleteCarparkArgs } from "./DeleteCarparkArgs";
import { FavoriteCarparkFindManyArgs } from "../../favoriteCarpark/base/FavoriteCarparkFindManyArgs";
import { FavoriteCarpark } from "../../favoriteCarpark/base/FavoriteCarpark";
import { CarparkService } from "../carpark.service";
@graphql.Resolver(() => Carpark)
export class CarparkResolverBase {
  constructor(protected readonly service: CarparkService) {}

  async _carparksMeta(
    @graphql.Args() args: CarparkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Carpark])
  async carparks(
    @graphql.Args() args: CarparkFindManyArgs
  ): Promise<Carpark[]> {
    return this.service.carparks(args);
  }

  @graphql.Query(() => Carpark, { nullable: true })
  async carpark(
    @graphql.Args() args: CarparkFindUniqueArgs
  ): Promise<Carpark | null> {
    const result = await this.service.carpark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Carpark)
  async createCarpark(
    @graphql.Args() args: CreateCarparkArgs
  ): Promise<Carpark> {
    return await this.service.createCarpark({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Carpark)
  async updateCarpark(
    @graphql.Args() args: UpdateCarparkArgs
  ): Promise<Carpark | null> {
    try {
      return await this.service.updateCarpark({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Carpark)
  async deleteCarpark(
    @graphql.Args() args: DeleteCarparkArgs
  ): Promise<Carpark | null> {
    try {
      return await this.service.deleteCarpark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FavoriteCarpark], { name: "favoriteCarparks" })
  async findFavoriteCarparks(
    @graphql.Parent() parent: Carpark,
    @graphql.Args() args: FavoriteCarparkFindManyArgs
  ): Promise<FavoriteCarpark[]> {
    const results = await this.service.findFavoriteCarparks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
