/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Carpark as PrismaCarpark,
  FavoriteCarpark as PrismaFavoriteCarpark,
} from "@prisma/client";

export class CarparkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CarparkCountArgs, "select">): Promise<number> {
    return this.prisma.carpark.count(args);
  }

  async carparks(args: Prisma.CarparkFindManyArgs): Promise<PrismaCarpark[]> {
    return this.prisma.carpark.findMany(args);
  }
  async carpark(
    args: Prisma.CarparkFindUniqueArgs
  ): Promise<PrismaCarpark | null> {
    return this.prisma.carpark.findUnique(args);
  }
  async createCarpark(args: Prisma.CarparkCreateArgs): Promise<PrismaCarpark> {
    return this.prisma.carpark.create(args);
  }
  async updateCarpark(args: Prisma.CarparkUpdateArgs): Promise<PrismaCarpark> {
    return this.prisma.carpark.update(args);
  }
  async deleteCarpark(args: Prisma.CarparkDeleteArgs): Promise<PrismaCarpark> {
    return this.prisma.carpark.delete(args);
  }

  async findFavoriteCarparks(
    parentId: string,
    args: Prisma.FavoriteCarparkFindManyArgs
  ): Promise<PrismaFavoriteCarpark[]> {
    return this.prisma.carpark
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .favoriteCarparks(args);
  }
}
